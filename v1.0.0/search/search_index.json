{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kickstart-Guide","text":"<p>Welcome to the Kickstart-Guide! This guide will help you get started with various tools. Currently, the guide includes the following tools:</p> <ul> <li>Git</li> </ul> <p>Source code for the guide is available on GitHub.</p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you have any feedback or suggestions for improvement, please feel free to open an issue on the GitHub repository. Your feedback is greatly appreciated!</p>"},{"location":"NAV/","title":"NAV","text":"<ul> <li>Home</li> <li>Guides</li> <li>Git<ul> <li>Install</li> <li>Basics</li> <li>Git-Flow</li> <li>References</li> </ul> </li> <li>About</li> </ul>"},{"location":"about/","title":"About the Kickstart-Guide","text":"<p>The Kickstart-Guide is a direct, practical resource for developers at all stages of their journey. It's crafted to offer quick access to information. This guide stands as a ready reference to support your work, learning, and exploration in the field of development.</p> <p>Who Is It For?</p> <ul> <li>Newcomers: Introducing foundational concepts and tools to those new to development.</li> <li>Experienced Developers: Providing quick refreshers and advanced insights.</li> <li>Teams: Serving as a common knowledge base to ensure consistency in practices.</li> </ul>"},{"location":"about/#using-the-guide","title":"Using the Guide","text":"<p>Dive into any section that matches your current needs. The guide is designed for you to quickly find what you're looking for, understand it, and apply it to your projects or learning path.</p>"},{"location":"about/#license","title":"License","text":"<p>Shared under the Apache License 2.0, the Kickstart-Guide encourages open use and contribution. You can find the full license in the LICENSE.</p>"},{"location":"guides/git/","title":"Git","text":"<p>Git is a distributed version control system that allows multiple developers to collaborate on a project. It provides a way to track changes, and merge code changes. Git is widely used in the software development industry, and is an essential tool for any developer. There is already a lot of documentation available for Git and one of the best resources is the GitHub Git Guide. This guide will go over the basics briefly and then dive into more advanced topics.</p> <p>Table of Contents:</p> <ol> <li>Installing Git</li> <li>Basics</li> <li>Gitflow</li> <li>References</li> </ol>"},{"location":"guides/git/basics/","title":"Basics","text":"<p>In this guide, we will mostly use the command line to interact with Git. But all of these can also be done using a GUI tool like GitHub Desktop, GitKraken or even VS Code.</p>"},{"location":"guides/git/basics/#creating-a-repository","title":"Creating a Repository","text":"<p>There is couple of ways you can do this. You can create a new repository on GitHub with some initial files and then clone it to your local machine. Or you can create a new repository on your local machine and then publish it to GitHub. In VS Code press Ctrl+Shift+P or Cmd+Shift+P to open the command palette and type <code>Publish to GitHub</code> to create a new repository on GitHub.</p> <p></p>"},{"location":"guides/git/basics/#clone","title":"Clone","text":"<p>Cloning a repository means that you are making a copy of the repository on your local machine. This can be done by running the following command in the terminal:</p> <pre><code>git clone &lt;repository-url&gt;\n</code></pre> Tip <p>If you want to use your SSH key for authentication, clone the repository using the SSH path. If you have already cloned the repository using HTTPS but want to use SSH for authentication, you can change the remote URL using the following command:</p> <pre><code>git remote set-url origin &lt;new-repository-url&gt;\n</code></pre>"},{"location":"guides/git/basics/#status","title":"Status","text":"<p>The <code>git status</code> command shows the status of the working directory and the staging area. It won't modify anything in your repository, it just shows you the current status like which files are staged, unstaged, or untracked.</p>"},{"location":"guides/git/basics/#add","title":"Add","text":"<p>The <code>git add</code> command adds changes in the working directory to the staging area effectively telling Git that you want to include updates to a particular file in the next commit.</p> <p>To add specific files, you can run the following command:</p> <pre><code>git add &lt;file&gt;\n</code></pre> <p>To add all files, you can run the following command:</p> <pre><code>git add .\n</code></pre> Tip <p>When you delete a file from a repository, you still need to run <code>git add</code> otherwise git won't be aware of the deletion.</p>"},{"location":"guides/git/basics/#commit","title":"Commit","text":"<p>The <code>git commit</code> command is used to save changes to the local repository. It is like a snapshot of your repository at a particular point in time. But the changes are not yet on the remote repository.</p> <p>To commit changes, you can run the following command:</p> <pre><code>git commit -m \"commit message\"\n</code></pre> <p>It's highly recommended to read about Conventional Commits. It's a specification for adding human and machine readable meaning to commit messages.</p>"},{"location":"guides/git/basics/#push","title":"Push","text":"<p>The <code>git push</code> command is used to upload local repository content to a remote repository. It is used to make the commits you have made on your local repository online. It's recommended to pull the latest changes from the remote repository before pushing your changes. By doing so, you can resolve any conflicts before pushing your changes and reduce the chances of merge conflicts.</p> <p>To push changes, you can run the following command:</p> <pre><code>git push\n</code></pre>"},{"location":"guides/git/basics/#pull","title":"Pull","text":"<p>The <code>git pull</code> command is used to update the local version of a repository from a remote. It can be done by running the following command:</p> <pre><code>git pull\n</code></pre>"},{"location":"guides/git/gitflow/","title":"Gitflow","text":"<p>Gitflow is a branching model that is used for managing the development of a project. You have probably seen it in various open-source projects. It's bascially a set of rules that define how branches are created and merged in order to manage the development of a project. It is consist of two components, the main branches and the supporting branches.</p> <p></p>"},{"location":"guides/git/gitflow/#the-main-branches","title":"The Main Branches","text":"<p>The main branches are the branches that are used to manage the release of the project. They are:</p> <ol> <li><code>main</code> branch: This is the branch that contains the official release of the project.</li> <li><code>develop</code> branch: This is the branch that contains the latest development of the project and used to create the release of the project.It is where all the new features come together and are tested before they are released.</li> </ol>"},{"location":"guides/git/gitflow/#the-supporting-branches","title":"The Supporting Branches","text":"<p>The supporting branches are the branches that are used to develop new features and fix bugs. They are:</p> <ol> <li><code>feature</code> branch: This is the branch that is used to develop new features. It is branched off from the <code>develop</code> branch and merged back into the <code>develop</code> branch when the feature is complete.</li> <li><code>release</code> branch: This is the branch that is used to prepare the release of the project. The purpose of this branch is to stop the development of new features and fix bugs. It is branched off from the <code>develop</code> branch and merged back into the <code>main</code> branch when the release is complete.</li> <li><code>hotfix</code> branch: This is the branch that is used to fix bugs in the release. It is branched off from the <code>main</code> branch and merged back into the <code>main</code> branch when the bug is fixed.</li> </ol>"},{"location":"guides/git/gitflow/#the-workflow","title":"The Workflow","text":"<p>Let's think of a scenario where we have a project that is being developed. The project has the following branches:</p> <ol> <li><code>main</code> branch</li> <li><code>develop</code> branch</li> </ol>"},{"location":"guides/git/gitflow/#creatingfinishing-a-feature","title":"Creating/Finishing a Feature","text":"<p>We want to develop a new feature for the project. First, we create a new branch called <code>feature-my-feature</code> from the <code>develop</code> branch.</p> <pre><code># Create a new branch called feature-my-feature from the develop branch\ngit checkout -b feature-my-feature develop\n</code></pre> <p>After we have finished developing the feature, we merge the <code>feature-my-feature</code> branch back into the <code>develop</code> branch.</p> <pre><code># Merge the feature-my-feature branch into the develop branch\ngit checkout develop\ngit merge --no-ff feature-my-feature\ngit branch -d feature-my-feature\n</code></pre> Tip <p>The last command is optional but recommended. It deletes the <code>feature-my-feature</code> branch after it has been merged into the <code>develop</code> branch. Don't worry, the changes are still there in the <code>develop</code> branch. We just want to keep our branches clean.</p>"},{"location":"guides/git/gitflow/#creatingfinishing-a-release","title":"Creating/Finishing a Release","text":"<p>... After some time, we reach a point where we want to release the project. At this stage, it's crucial to consider how we version our releases. This is where Semantic Versioning (SemVer) comes into play. SemVer is a versioning scheme for software that aims to convey meaning about the underlying changes in a release through the version number itself. It is formatted as <code>MAJOR.MINOR.PATCH</code>, where:</p> <ul> <li>MAJOR versions indicate incompatible API changes,</li> <li>MINOR versions add functionality in a backwards-compatible manner, and</li> <li>PATCH versions include backwards-compatible bug fixes.</li> </ul> <p>For more detailed information on SemVer and its rules, visit semver.org.</p> <p>Now, to prepare our project for release, we create a new branch called <code>release-1.0</code> from the <code>develop</code> branch. The version number <code>1.0</code> should follow the SemVer guidelines, indicating this is our first stable release with a set of completed features.</p> <pre><code># Create a new branch called release-1.0 from the develop branch\ngit checkout -b release-1.0 develop\n./bump-version.sh 1.0\ngit commit -a -m \"chore(release): bump version number to 1.0\"\n</code></pre> <p>The <code>bump-version.sh</code> script is an imaginary script that we use to bump the version number of the project. After we have finished preparing the release, we merge the <code>release-1.0</code> branch back into the <code>main</code> branch.</p> <pre><code>git checkout main\ngit merge --no-ff release-1.0\n# Tag the release\ngit tag -a 1.0\n# Also Merge develop branch to keep it up to date with the release\ngit checkout develop\ngit merge --no-ff release-1.0\ngit branch -d release-1.0\n</code></pre> Tip <p>The last command is optional but recommended. It deletes the <code>release-1.0</code> branch after it has been merged into the <code>main</code> branch. Don't worry, the changes are still there in the <code>main</code> branch. We just want to keep our branches clean.</p>"},{"location":"guides/git/gitflow/#fixing-a-bug-in-the-release","title":"Fixing a Bug in the Release","text":"<p>After releasing version 1.0 of our project, we discovered a bug that needs to be addressed immediately. It's also important to adhere to SemVer principles. If the bug fix is backward compatible and doesn\u2019t introduce new features, it should increment the PATCH version. For instance, if we're fixing a bug in version <code>1.0</code>, the hotfix version would be <code>1.0.1</code>.</p> <pre><code># Create a new branch called hotfix-1.0.1 from the main branch\ngit checkout -b hotfix-1.0.1 main\n./bump-version.sh 1.0.1\ngit commit -a -m \"chore(release): bump version number to 1.0.1\"\n</code></pre> <p>After we have fixed the bug, we merge the <code>hotfix-1.0.1</code> branch back into the <code>main</code> branch.</p> <pre><code>git checkout main\ngit merge --no-ff hotfix-1.0.1\n# Tag the release\ngit tag -a 1.0.1\n# Also Merge develop branch to keep it up to date with the main\ngit checkout develop\ngit merge --no-ff hotfix-1.0.1\ngit branch -d hotfix-1.0.1\n</code></pre> Tip <p>The last command is optional but recommended. It deletes the <code>hotfix-1.0.1</code> branch after it has been merged into the <code>main</code> branch. Don't worry, the changes are still there in the <code>main</code> branch. We just want to keep our branches clean.</p>"},{"location":"guides/git/install/","title":"Install","text":"<p>You can check if Git is installed on your system by running the following command:</p> <pre><code>git version\n</code></pre> <p>The output should be similar to this:</p> <pre><code>git version 2.43.1\n</code></pre> <p>If you get an error like <code>git: command not found</code>, you can fallow the instructions below to install Git.</p>"},{"location":"guides/git/install/#installing-on-windows","title":"Installing on Windows","text":"<p>Installing <code>git</code> on Windows is straightforward</p> <ol> <li>Download the installer from the official website.</li> <li>Run the installer and follow the instructions.</li> <li>After the installation is complete, you can open terminal and run <code>git version</code> to check if the installation was successful.</li> </ol> Tip <p>In Windows 10 or later, you can also use WSL which allows you to run a Linux on top of Windows. This allows you to be in a Linux environment while still using Windows.</p> Note <p>At the <code>Adjusting your PATH environment</code> choose <code>Git from the command line and also from 3rd-party software</code>. This will allow you to use <code>git</code> from the windows terminal. This article assumes that you have done this. Otherwise you will have to use the Git Bash terminal that comes with the installer for the commands in this guide.</p>"},{"location":"guides/git/install/#installing-on-macos","title":"Installing on macOS","text":"<p>Usially <code>git</code> is already installed on macOS. But if it for some reason is not installed, you can install it either with Homebrew or by downloading the installer.</p>"},{"location":"guides/git/install/#using-homebrew","title":"Using Homebrew","text":"<p>Homebrew is a package manager for macOS. If you have Homebrew installed, you can install <code>git</code> easily.</p> <ol> <li> <p>Open terminal and run the following command to install <code>git</code>:</p> <pre><code>brew install git\n</code></pre> </li> <li> <p>After the installation is complete, you can run <code>git version</code> to verify that the installation was successful.</p> </li> </ol>"},{"location":"guides/git/install/#using-the-installer","title":"Using the installer","text":"<ol> <li>Download the latest installer.</li> <li>Run the installer and follow the instructions.</li> <li>After the installation is complete. You can verify the installation by running <code>git version</code> in the terminal.</li> </ol>"},{"location":"guides/git/install/#installing-on-linux","title":"Installing on Linux","text":"<p>You can install <code>git</code> on Linux using the package manager of your distribution.</p>"},{"location":"guides/git/install/#debianubuntu-or-derivatives","title":"Debian/Ubuntu or derivatives","text":"<pre><code>sudo apt-get update\nsudo apt-get install git\n</code></pre>"},{"location":"guides/git/install/#fedora-or-derivatives","title":"Fedora or derivatives","text":"<pre><code>sudo dnf install git-all\n</code></pre>"},{"location":"guides/git/install/#arch-linux-or-derivatives","title":"Arch Linux or derivatives","text":"<pre><code>sudo pacman -S git\n</code></pre> <p>After the installation is complete, you can verify the installation by running <code>git version</code> in the terminal.</p>"},{"location":"guides/git/install/#configuration","title":"Configuration","text":"<p>Installing git allows you to clone repositories and track changes in your projects. However, you need to configure git with your credentials before you can push changes to a remote repository. This can be done by running the following commands in the terminal:</p> <pre><code>git config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n</code></pre> <p>You can also omit the <code>--global</code> flag to set the configuration for a single repository. For that you need to navigate to the repository and run the same commands without the <code>--global</code> flag.</p> <p>From this point on you can use git to track changes in your project. Git will ask you your credentials when you try to push your changes to a remote repository. You can also use SSH keys to authenticate with the remote repository. Which is not only more secure but also more convenient.</p> Note <p>If you are using GitHub, you have to use SSH keys to authenticate with the remote repository. GitHub has removed support for password authentication on August 13, 2021.</p>"},{"location":"guides/git/install/#ssh-keys","title":"SSH Keys","text":"<p>To create an SSH key, you can run the following command in the terminal:</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>This will create a new SSH key, using the provided email as a label. You can safely accept the default file location when asked. You can also add a passphrase to your SSH key for an extra layer of security. Which is recommended. Without a passphrase the ssh key will be stored in your computer as plain text.</p> Tip <p>If ssh-keygen asks you to overwrite the file this means that you already have created an SSH key in the past. You can either overwrite the file or provide a new file name. To create a custom-named SSH key you can type the default file location and then the name of the new file.</p> <p>After generating the SSH key, the next step is adding it to your remote repository. Instructions for GitHub and for GitLab are available in their respective documentation.</p> <p>You can also add the SSH key to your SSH agent which will allow you to use the key without having to enter the passphrase every time you use it. For that GitHub has a good guide on how to add SSH key to the ssh-agent.</p>"},{"location":"guides/git/references/","title":"References","text":"<ul> <li>GitHub Git Guide</li> <li>GitHub Authentication Documentation</li> <li>Gitflow Medium</li> <li>Gitflow Nvie</li> </ul>"},{"location":"de/","title":"Kickstart-Guide","text":"<p>Willkommen zum Kickstart-Guide! Dieser Guide wird Ihnen den Einstieg mit verschiedenen Tools erleichtern. Aktuell beinhaltet der Guide die folgenden Tools:</p> <ul> <li>Git</li> </ul> <p>Der Quellcode f\u00fcr den Guide ist auf GitHub verf\u00fcgbar.</p>"},{"location":"de/#feedback","title":"Feedback","text":"<p>Falls Sie R\u00fcckmeldungen oder Vorschl\u00e4ge zur Verbesserung haben, z\u00f6gern Sie nicht, ein Issue im GitHub-Repository zu erstellen. Ihr Feedback ist sehr willkommen!</p>"},{"location":"de/NAV/","title":"NAV","text":"<ul> <li>Startseite</li> <li>Anleitungen</li> <li>Git<ul> <li>Installation</li> <li>Basics</li> <li>Git-Flow</li> <li>Referenzen</li> </ul> </li> <li>\u00dcber</li> </ul>"},{"location":"de/about/","title":"\u00dcber den Kickstart-Guide","text":"<p>Der Kickstart-Guide ist eine direkte, praktische Ressource f\u00fcr Entwickler auf allen Stufen ihrer Laufbahn. Er ist darauf ausgelegt, schnellen Zugriff auf Informationen zu bieten. Dieser Guide dient als sofort verf\u00fcgbare Referenz, um Ihre Arbeit, Ihr Lernen und Ihre Erkundungen im Bereich der Entwicklung zu unterst\u00fctzen.</p> <p>F\u00fcr wen ist er gedacht?</p> <ul> <li>Neueinsteiger: Einf\u00fchrung in grundlegende Konzepte und Tools f\u00fcr diejenigen, die neu in der Entwicklung sind.</li> <li>Erfahrene Entwickler: Bietet schnelle Auffrischungen und fortgeschrittene Einblicke.</li> <li>Teams: Dient als gemeinsame Wissensbasis, um Konsistenz in den Praktiken zu gew\u00e4hrleisten.</li> </ul>"},{"location":"de/about/#nutzung-des-guides","title":"Nutzung des Guides","text":"<p>Tauchen Sie in jeden Abschnitt ein, der Ihren aktuellen Bed\u00fcrfnissen entspricht. Der Guide ist so konzipiert, dass Sie schnell finden, wonach Sie suchen, es verstehen und auf Ihre Projekte oder Ihren Lernpfad anwenden k\u00f6nnen.</p>"},{"location":"de/about/#lizenz","title":"Lizenz","text":"<p>Geteilt unter der Apache-Lizenz 2.0, f\u00f6rdert der Kickstart-Guide offene Nutzung und Beitrag. Sie k\u00f6nnen die vollst\u00e4ndige Lizenz im LICENSE finden.</p>"},{"location":"de/guides/git/","title":"Git","text":"<p>Git ist ein verteiltes Versionskontrollsystem, das es mehreren Entwicklern erm\u00f6glicht, an einem Projekt zusammenzuarbeiten. Es bietet eine M\u00f6glichkeit, \u00c4nderungen zu verfolgen und Code\u00e4nderungen zu mergen. Git wird in der Softwareentwicklungsbranche weit verbreitet eingesetzt und ist ein unverzichtbares Werkzeug f\u00fcr jeden Entwickler. Es gibt bereits viel Dokumentation \u00fcber Git, und eine der besten Ressourcen ist der GitHub Git Guide. Dieser Guide wird kurz die Grundlagen behandeln und dann in fortgeschrittenere Themen eintauchen.</p> <p>Inhaltsverzeichnis:</p> <ol> <li>Git installieren</li> <li>Grundlagen</li> <li>Gitflow</li> <li>Referenzen</li> </ol>"},{"location":"de/guides/git/basics/","title":"Grundlagen","text":"<p>In diesem Guide werden wir haupts\u00e4chlich die Kommandozeile verwenden, um mit Git zu interagieren. All dies kann jedoch auch mit einem GUI-Tool wie GitHub Desktop, GitKraken oder sogar VS Code durchgef\u00fchrt werden.</p>"},{"location":"de/guides/git/basics/#ein-repository-erstellen","title":"Ein Repository erstellen","text":"<p>Es gibt mehrere Wege, dies zu tun. Sie k\u00f6nnen ein neues Repository auf GitHub mit einigen Anfangsdateien erstellen und es dann auf Ihren lokalen Rechner klonen. Oder Sie k\u00f6nnen ein neues Repository auf Ihrem lokalen Rechner erstellen und es dann auf GitHub ver\u00f6ffentlichen. In VS Code dr\u00fccken Sie Ctrl+Shift+P oder Cmd+Shift+P, um die Befehlspalette zu \u00f6ffnen und geben <code>Publish to GitHub</code> ein, um ein neues Repository auf GitHub zu erstellen.</p> <p></p>"},{"location":"de/guides/git/basics/#clone","title":"Clone","text":"<p>Ein Repository zu clonen bedeutet, dass Sie eine Kopie des Repositories auf Ihrem lokalen Rechner anlegen. Dies kann durch Ausf\u00fchren des folgenden Befehls im Terminal geschehen:</p> <pre><code>git clone &lt;repository-url&gt;\n</code></pre> Tip <p>Wenn Sie Ihren SSH-Schl\u00fcssel zur Authentifizierung verwenden m\u00f6chten, klonen Sie das Repository mit dem SSH-Pfad. Wenn Sie das Repository bereits mit HTTPS geklont haben, aber SSH zur Authentifizierung verwenden m\u00f6chten, k\u00f6nnen Sie die Remote-URL mit dem folgenden Befehl \u00e4ndern:</p> <pre><code>git remote set-url origin &lt;new-repository-url&gt;\n</code></pre>"},{"location":"de/guides/git/basics/#status","title":"Status","text":"<p>Der Befehl <code>git status</code> zeigt den Status des Arbeitsverzeichnisses und des Staging-Bereichs an. Er ver\u00e4ndert nichts in Ihrem Repository, zeigt Ihnen nur den aktuellen Status an, wie welche Dateien gestaged, nicht gestaged oder nicht verfolgt werden.</p>"},{"location":"de/guides/git/basics/#add","title":"Add","text":"<p>Der Befehl <code>git add</code> f\u00fcgt \u00c4nderungen im Arbeitsverzeichnis zum Staging-Bereich hinzu und teilt Git effektiv mit, dass Sie Updates einer bestimmten Datei im n\u00e4chsten Commit einschlie\u00dfen m\u00f6chten.</p> <p>Um spezifische Dateien hinzuzuf\u00fcgen, k\u00f6nnen Sie den folgenden Befehl ausf\u00fchren:</p> <pre><code>git add &lt;file&gt;\n</code></pre> <p>Um alle Dateien hinzuzuf\u00fcgen, k\u00f6nnen Sie den folgenden Befehl ausf\u00fchren:</p> <pre><code>git add .\n</code></pre> Tip <p>Wenn Sie eine Datei aus einem Repository l\u00f6schen, m\u00fcssen Sie trotzdem <code>git add</code> ausf\u00fchren, sonst wird git sich der L\u00f6schung nicht bewusst.</p>"},{"location":"de/guides/git/basics/#commit","title":"Commit","text":"<p>Der Befehl <code>git commit</code> wird verwendet, um \u00c4nderungen im lokalen Repository zu speichern. Es ist wie ein Snapshot Ihres Repositories zu einem bestimmten Zeitpunkt. Aber die \u00c4nderungen sind noch nicht im Remote-Repository.</p> <p>Um \u00c4nderungen zu commiten, k\u00f6nnen Sie den folgenden Befehl ausf\u00fchren:</p> <pre><code>git commit -m \"commit message\"\n</code></pre> <p>Es wird dringend empfohlen, sich \u00fcber Conventional Commits zu informieren. Es ist eine Spezifikation, um Commit-Nachrichten menschen- und maschinenlesbare Bedeutung hinzuzuf\u00fcgen.</p>"},{"location":"de/guides/git/basics/#push","title":"Push","text":"<p>Der Befehl <code>git push</code> wird verwendet, um Inhalte des lokalen Repositories auf ein Remote-Repository hochzuladen. Er wird verwendet, um die Commits, die Sie in Ihrem lokalen Repository gemacht haben, online zu stellen. Es wird empfohlen, die neuesten \u00c4nderungen aus dem Remote-Repository pullen, bevor Sie Ihre \u00c4nderungen pushen. Dadurch k\u00f6nnen Sie Konflikte l\u00f6sen, bevor Sie Ihre \u00c4nderungen pushen und die Chancen auf Merge-Konflikte reduzieren.</p> <p>Um \u00c4nderungen zu pushen, k\u00f6nnen Sie den folgenden Befehl ausf\u00fchren:</p> <pre><code>git push\n</code></pre>"},{"location":"de/guides/git/basics/#pull","title":"Pull","text":"<p>Der Befehl <code>git pull</code> wird verwendet, um die lokale Version eines Repositories von einem Remote zu aktualisieren. Dies kann durch Ausf\u00fchren des folgenden Befehls geschehen:</p> <pre><code>git pull\n</code></pre>"},{"location":"de/guides/git/gitflow/","title":"Gitflow","text":"<p>Gitflow ist ein Branching-Modell, das f\u00fcr das Management der Entwicklung eines Projekts verwendet wird. Sie haben es wahrscheinlich in verschiedenen Open-Source-Projekten gesehen. Es ist im Grunde ein Satz von Regeln, der definiert, wie Branches erstellt und zusammengef\u00fchrt werden, um die Entwicklung eines Projekts zu managen. Es besteht aus zwei Komponenten: den Hauptbranches und den unterst\u00fctzenden Branches.</p> <p></p>"},{"location":"de/guides/git/gitflow/#die-hauptbranches","title":"Die Hauptbranches","text":"<p>Die Hauptbranches sind die Branches, die verwendet werden, um die Ver\u00f6ffentlichung des Projekts zu managen. Sie sind:</p> <ol> <li><code>main</code>-Branch: Dies ist der Branch, der die offizielle Ver\u00f6ffentlichung des Projekts enth\u00e4lt.</li> <li><code>develop</code>-Branch: Dies ist der Branch, der die neueste Entwicklung des Projekts enth\u00e4lt und verwendet wird, um die Ver\u00f6ffentlichung des Projekts zu erstellen. Hier kommen alle neuen Features zusammen und werden getestet, bevor sie ver\u00f6ffentlicht werden.</li> </ol>"},{"location":"de/guides/git/gitflow/#die-unterstutzenden-branches","title":"Die unterst\u00fctzenden Branches","text":"<p>Die unterst\u00fctzenden Branches sind die Branches, die verwendet werden, um neue Features zu entwickeln und Bugs zu beheben. Sie sind:</p> <ol> <li><code>feature</code>-Branch: Dies ist der Branch, der zur Entwicklung neuer Features verwendet wird. Er wird vom <code>develop</code>-Branch abgezweigt und zur\u00fcck in den <code>develop</code>-Branch gemerged, wenn das Feature fertig ist.</li> <li><code>release</code>-Branch: Dies ist der Branch, der zur Vorbereitung der Ver\u00f6ffentlichung des Projekts verwendet wird. Der Zweck dieses Branches ist es, die Entwicklung neuer Features zu stoppen und Bugs zu beheben. Er wird vom <code>develop</code>-Branch abgezweigt und zur\u00fcck in den <code>main</code>-Branch gemerged, wenn die Ver\u00f6ffentlichung abgeschlossen ist.</li> <li><code>hotfix</code>-Branch: Dies ist der Branch, der zur Behebung von Bugs in der Ver\u00f6ffentlichung verwendet wird. Er wird vom <code>main</code>-Branch abgezweigt und zur\u00fcck in den <code>main</code>-Branch gemerged, wenn der Bug behoben ist.</li> </ol>"},{"location":"de/guides/git/gitflow/#der-workflow","title":"Der Workflow","text":"<p>Stellen wir uns ein Szenario vor, in dem wir ein Projekt haben, das entwickelt wird. Das Projekt hat die folgenden Branches:</p> <ol> <li><code>main</code>-Branch</li> <li><code>develop</code>-Branch</li> </ol>"},{"location":"de/guides/git/gitflow/#ein-feature-erstellenbeenden","title":"Ein Feature erstellen/beenden","text":"<p>Wir m\u00f6chten ein neues Feature f\u00fcr das Projekt entwickeln. Zuerst erstellen wir einen neuen Branch namens <code>feature-my-feature</code> vom <code>develop</code>-Branch.</p> <pre><code># Erstelle einen neuen Branch namens feature-my-feature vom develop-Branch\ngit checkout -b feature-my-feature develop\n</code></pre> <p>Nachdem wir die Entwicklung des Features abgeschlossen haben, mergen wir den <code>feature-my-feature</code>-Branch zur\u00fcck in den <code>develop</code>-Branch.</p> <pre><code># Merge den feature-my-feature-Branch in den develop-Branch\ngit checkout develop\ngit merge --no-ff feature-my-feature\ngit branch -d feature-my-feature\n</code></pre> Tip <p>Der letzte Befehl ist optional, aber empfohlen. Er l\u00f6scht den <code>feature-my-feature</code>-Branch, nachdem er in den <code>develop</code>-Branch gemerged wurde. Keine Sorge, die \u00c4nderungen sind immer noch im <code>develop</code>-Branch. Wir m\u00f6chten nur unsere Branches sauber halten.</p>"},{"location":"de/guides/git/gitflow/#eine-veroffentlichung-erstellenbeenden","title":"Eine Ver\u00f6ffentlichung erstellen/beenden","text":"<p>... Nach einiger Zeit erreichen wir einen Punkt, an dem wir das Projekt ver\u00f6ffentlichen m\u00f6chten. In dieser Phase ist es entscheidend, wie wir unsere Ver\u00f6ffentlichungen versionieren. Hier kommt Semantic Versioning (SemVer) ins Spiel. SemVer ist ein Versionierungsschema f\u00fcr Software, das durch die Versionsnummer selbst Bedeutung \u00fcber die zugrunde liegenden \u00c4nderungen in einer Ver\u00f6ffentlichung vermitteln soll. Es ist formatiert als <code>MAJOR.MINOR.PATCH</code>, wobei:</p> <ul> <li>MAJOR-Versionen inkompatible API-\u00c4nderungen anzeigen,</li> <li>MINOR-Versionen Funktionalit\u00e4t auf eine r\u00fcckw\u00e4rtskompatible Weise hinzuf\u00fcgen, und</li> <li>PATCH-Versionen r\u00fcckw\u00e4rtskompatible Bugfixes enthalten.</li> </ul> <p>F\u00fcr detailliertere Informationen zu SemVer und seinen Regeln besuchen Sie semver.org.</p> <p>Nun, um unser Projekt f\u00fcr die Ver\u00f6ffentlichung vorzubereiten, erstellen wir</p> <p>einen neuen Branch namens <code>release-1.0</code> vom <code>develop</code>-Branch. Die Versionsnummer <code>1.0</code> sollte den SemVer-Richtlinien folgen, was darauf hindeutet, dass dies unsere erste stabile Ver\u00f6ffentlichung mit einem Satz von fertiggestellten Features ist.</p> <pre><code># Erstelle einen neuen Branch namens release-1.0 vom develop-Branch\ngit checkout -b release-1.0 develop\n./bump-version.sh 1.0\ngit commit -a -m \"chore(release): bump version number to 1.0\"\n</code></pre> <p>Das <code>bump-version.sh</code>-Skript ist ein imagin\u00e4res Skript, das wir verwenden, um die Versionsnummer des Projekts zu erh\u00f6hen. Nachdem wir die Ver\u00f6ffentlichung vorbereitet haben, mergen wir den <code>release-1.0</code>-Branch zur\u00fcck in den <code>main</code>-Branch.</p> <pre><code>git checkout main\ngit merge --no-ff release-1.0\n# Tagge die Ver\u00f6ffentlichung\ngit tag -a 1.0\n# Merge auch den develop-Branch, um ihn auf dem neuesten Stand mit der Ver\u00f6ffentlichung zu halten\ngit checkout develop\ngit merge --no-ff release-1.0\ngit branch -d release-1.0\n</code></pre> Tip <p>Der letzte Befehl ist optional, aber empfohlen. Er l\u00f6scht den <code>release-1.0</code>-Branch, nachdem er in den <code>main</code>-Branch gemerged wurde. Keine Sorge, die \u00c4nderungen sind immer noch im <code>main</code>-Branch. Wir m\u00f6chten nur unsere Branches sauber halten.</p>"},{"location":"de/guides/git/gitflow/#einen-bug-in-der-veroffentlichung-beheben","title":"Einen Bug in der Ver\u00f6ffentlichung beheben","text":"<p>Nachdem wir die Version 1.0 unseres Projekts ver\u00f6ffentlicht haben, entdecken wir einen Bug, der sofort behoben werden muss. Es ist auch wichtig, sich an die SemVer-Prinzipien zu halten. Wenn der Bugfix r\u00fcckw\u00e4rtskompatibel ist und keine neuen Features einf\u00fchrt, sollte er die PATCH-Version erh\u00f6hen. Wenn wir beispielsweise einen Bug in Version <code>1.0</code> beheben, w\u00e4re die Hotfix-Version <code>1.0.1</code>.</p> <pre><code># Erstelle einen neuen Branch namens hotfix-1.0.1 vom main-Branch\ngit checkout -b hotfix-1.0.1 main\n./bump-version.sh 1.0.1\ngit commit -a -m \"chore(release): bump version number to 1.0.1\"\n</code></pre> <p>Nachdem wir den Bug behoben haben, mergen wir den <code>hotfix-1.0.1</code>-Branch zur\u00fcck in den <code>main</code>-Branch.</p> <pre><code>git checkout main\ngit merge --no-ff hotfix-1.0.1\n# Tagge die Ver\u00f6ffentlichung\ngit tag -a 1.0.1\n# Merge auch den develop-Branch, um ihn auf dem neuesten Stand mit dem main zu halten\ngit checkout develop\ngit merge --no-ff hotfix-1.0.1\ngit branch -d hotfix-1.0.1\n</code></pre> Tip <p>Der letzte Befehl ist optional, aber empfohlen. Er l\u00f6scht den <code>hotfix-1.0.1</code>-Branch, nachdem er in den <code>main</code>-Branch gemerged wurde. Keine Sorge, die \u00c4nderungen sind immer noch im <code>main</code>-Branch. Wir m\u00f6chten nur unsere Branches sauber halten.</p>"},{"location":"de/guides/git/install/","title":"Installation","text":"<p>Sie k\u00f6nnen \u00fcberpr\u00fcfen, ob Git auf Ihrem System bereits installiert ist, indem Sie den folgenden Befehl ausf\u00fchren:</p> <pre><code>git version\n</code></pre> <p>Die Ausgabe sollte \u00e4hnlich wie folgt sein:</p> <pre><code>git version 2.43.1\n</code></pre> <p>Wenn Sie einen Fehler wie <code>git: Befehl nicht gefunden</code> erhalten, k\u00f6nnen Sie den folgenden Anweisungen folgen, um Git zu installieren.</p>"},{"location":"de/guides/git/install/#installation-unter-windows","title":"Installation unter Windows","text":"<p>Die Installation von <code>git</code> unter Windows ist unkompliziert.</p> <ol> <li>Laden Sie den Installer von der offiziellen Webseite herunter.</li> <li>F\u00fchren Sie den Installer aus und folgen Sie den Anweisungen.</li> <li>Nach der Installation k\u00f6nnen Sie das Terminal \u00f6ffnen und <code>git version</code> ausf\u00fchren, um zu \u00fcberpr\u00fcfen, ob die Installation erfolgreich war.</li> </ol> Tip <p>Unter Windows 10 oder sp\u00e4ter k\u00f6nnen Sie auch WSL nutzen, das Ihnen erlaubt, Linux auf Windows auszuf\u00fchren. Dies erm\u00f6glicht es Ihnen, in einer Linux-Umgebung zu sein, w\u00e4hrend Sie Windows verwenden.</p> Note <p>W\u00e4hlen Sie bei der <code>Anpassung Ihrer PATH-Umgebung</code> die Option <code>Git von der Kommandozeile und auch von Drittanbieter-Software</code>. Dies erm\u00f6glicht es Ihnen, <code>git</code> aus dem Windows-Terminal zu nutzen. Dieser Artikel geht davon aus, dass Sie dies getan haben. Andernfalls m\u00fcssen Sie das Git Bash Terminal verwenden, das mit dem Installer geliefert wird, f\u00fcr die Befehle in diesem Guide.</p>"},{"location":"de/guides/git/install/#installation-unter-macos","title":"Installation unter macOS","text":"<p>Normalerweise ist <code>git</code> bereits auf macOS installiert. Aber falls es aus irgendeinem Grund nicht installiert ist, k\u00f6nnen Sie es entweder mit Homebrew oder durch Herunterladen des Installers installieren.</p>"},{"location":"de/guides/git/install/#mit-homebrew","title":"Mit Homebrew","text":"<p>Homebrew ist ein Paketmanager f\u00fcr macOS. Wenn Sie Homebrew installiert haben, k\u00f6nnen Sie <code>git</code> einfach installieren.</p> <ol> <li> <p>\u00d6ffnen Sie das Terminal und f\u00fchren Sie den folgenden Befehl aus, um <code>git</code> zu installieren:</p> <pre><code>brew install git\n</code></pre> </li> <li> <p>Nach der Installation k\u00f6nnen Sie <code>git version</code> ausf\u00fchren, um zu \u00fcberpr\u00fcfen, ob die Installation erfolgreich war.</p> </li> </ol>"},{"location":"de/guides/git/install/#mit-dem-installer","title":"Mit dem Installer","text":"<ol> <li>Laden Sie den neuesten Installer herunter.</li> <li>F\u00fchren Sie den Installer aus und folgen Sie den Anweisungen.</li> <li>Nach der Installation k\u00f6nnen Sie die Installation \u00fcberpr\u00fcfen, indem Sie <code>git version</code> im Terminal ausf\u00fchren.</li> </ol>"},{"location":"de/guides/git/install/#installation-unter-linux","title":"Installation unter Linux","text":"<p>Sie k\u00f6nnen <code>git</code> unter Linux mit dem Paketmanager Ihrer Distribution installieren.</p>"},{"location":"de/guides/git/install/#debianubuntu-oder-derivate","title":"Debian/Ubuntu oder Derivate","text":"<pre><code>sudo apt-get update\nsudo apt-get install git\n</code></pre>"},{"location":"de/guides/git/install/#fedora-oder-derivate","title":"Fedora oder Derivate","text":"<pre><code>sudo dnf install git-all\n</code></pre>"},{"location":"de/guides/git/install/#arch-linux-oder-derivate","title":"Arch Linux oder Derivate","text":"<pre><code>sudo pacman -S git\n</code></pre> <p>Nach der Installation k\u00f6nnen Sie die Installation \u00fcberpr\u00fcfen, indem Sie <code>git version</code> im Terminal ausf\u00fchren.</p>"},{"location":"de/guides/git/install/#konfiguration","title":"Konfiguration","text":"<p>Die Installation von Git erm\u00f6glicht es Ihnen, Repositories zu klonen und \u00c4nderungen in Ihren Projekten zu verfolgen. Jedoch m\u00fcssen Sie Git mit Ihren Anmeldedaten konfigurieren, bevor Sie \u00c4nderungen an ein entferntes Repository pushen k\u00f6nnen. Dies kann durch Ausf\u00fchren der folgenden Befehle im Terminal geschehen:</p> <pre><code>git config --global user.email \"you@example.com\"\ngit config --global user.name \"Ihr Name\"\n</code></pre> <p>Sie k\u00f6nnen auch die <code>--global</code>-Flagge weglassen, um die Konfiguration f\u00fcr ein einzelnes Repository zu setzen. Daf\u00fcr m\u00fcssen Sie zu dem Repository navigieren und die gleichen Befehle ohne die <code>--global</code>-Flagge ausf\u00fchren.</p> <p>Von diesem Punkt an k\u00f6nnen Sie Git nutzen, um \u00c4nderungen in Ihrem Projekt zu verfolgen. Git wird Sie nach Ihren Anmeldedaten fragen, wenn Sie versuchen, Ihre \u00c4nderungen an ein entferntes Repository zu pushen. Sie k\u00f6nnen auch SSH-Schl\u00fcssel verwenden, um sich bei dem entfernten Repository zu authentifizieren. Dies ist nicht nur sicherer, sondern auch bequemer.</p> Note <p>Wenn Sie GitHub verwenden, m\u00fcssen Sie SSH-Schl\u00fcssel verwenden, um sich bei dem entfernten Repository zu authentifizieren. GitHub hat die Unterst\u00fctzung f\u00fcr Passwortauthentifizierung am 13. August 2021 entfernt.</p>"},{"location":"de/guides/git/install/#ssh-schlussel","title":"SSH-Schl\u00fcssel","text":"<p>Um einen SSH-Schl\u00fcssel zu erstellen, k\u00f6nnen Sie den folgenden Befehl im Terminal ausf\u00fchren:</p> <pre><code>ssh-keygen -t ed25519 -C \"ihre_email@example.com\"\n</code></pre> <p>Dies erstellt einen neuen SSH-Schl\u00fcssel unter Verwendung der bereitgestellten E-Mail als Label. Sie k\u00f6nnen den Standarddateispeicherort bei der Frage akzeptieren. Sie k\u00f6nnen Ihrem SSH-Schl\u00fcssel auch ein Passwort hinzuf\u00fcgen, was f\u00fcr eine zus\u00e4tzliche Sicherheitsebene empfohlen wird. Ohne Passwort wird der SSH-Schl\u00fcssel auf Ihrem Computer als Klartext gespeichert.</p> Tip <p>Wenn ssh-keygen Sie fragt, ob die Datei \u00fcberschrieben werden soll, bedeutet dies, dass Sie bereits in der Vergangenheit einen SSH-Schl\u00fcssel erstellt haben. Sie k\u00f6nnen entweder die Datei \u00fcberschreiben oder einen neuen Dateinamen angeben. Um einen benutzerdefinierten SSH-Schl\u00fcssel zu erstellen, k\u00f6nnen Sie den Standarddateispeicherort eingeben und dann den Namen der neuen Datei.</p> <p>Nachdem der SSH-Schl\u00fcssel generiert wurde, ist der n\u00e4chste Schritt, ihn zu Ihrem entfernten Repository hinzuzuf\u00fcgen. Anleitungen f\u00fcr GitHub und f\u00fcr GitLab sind in ihrer jeweiligen Dokumentation verf\u00fcgbar.</p> <p>Sie k\u00f6nnen den SSH-Schl\u00fcssel auch Ihrem SSH-Agenten hinzuf\u00fcgen, was Ihnen erlaubt, den Schl\u00fcssel zu nutzen, ohne jedes Mal das Passwort eingeben zu m\u00fcssen. Daf\u00fcr hat GitHub eine gute Anleitung, wie man SSH-Schl\u00fcssel zum ssh-agent hinzuf\u00fcgt.</p>"},{"location":"de/guides/git-copy/","title":"Git","text":"<p>Git is a distributed version control system that allows multiple developers to collaborate on a project. It provides a way to track changes, and merge code changes. Git is widely used in the software development industry, and is an essential tool for any developer. There is already a lot of documentation available for Git and one of the best resources is the GitHub Git Guide. This guide will go over the basics briefly and then dive into more advanced topics.</p> <p>Table of Contents:</p> <ol> <li>Installing Git</li> <li>Basics</li> <li>Gitflow</li> <li>References</li> </ol>"},{"location":"de/guides/git-copy/basics/","title":"Basics","text":"<p>In this guide, we will mostly use the command line to interact with Git. But all of these can also be done using a GUI tool like GitHub Desktop, GitKraken or even VS Code.</p>"},{"location":"de/guides/git-copy/basics/#creating-a-repository","title":"Creating a Repository","text":"<p>There is couple of ways you can do this. You can create a new repository on GitHub with some initial files and then clone it to your local machine. Or you can create a new repository on your local machine and then publish it to GitHub. In VS Code press Ctrl+Shift+P or Cmd+Shift+P to open the command palette and type <code>Publish to GitHub</code> to create a new repository on GitHub.</p> <p></p>"},{"location":"de/guides/git-copy/basics/#clone","title":"Clone","text":"<p>Cloning a repository means that you are making a copy of the repository on your local machine. This can be done by running the following command in the terminal:</p> <pre><code>git clone &lt;repository-url&gt;\n</code></pre> Tip <p>If you want to use your SSH key for authentication, clone the repository using the SSH path. If you have already cloned the repository using HTTPS but want to use SSH for authentication, you can change the remote URL using the following command:</p> <pre><code>git remote set-url origin &lt;new-repository-url&gt;\n</code></pre>"},{"location":"de/guides/git-copy/basics/#status","title":"Status","text":"<p>The <code>git status</code> command shows the status of the working directory and the staging area. It won't modify anything in your repository, it just shows you the current status like which files are staged, unstaged, or untracked.</p>"},{"location":"de/guides/git-copy/basics/#add","title":"Add","text":"<p>The <code>git add</code> command adds changes in the working directory to the staging area effectively telling Git that you want to include updates to a particular file in the next commit.</p> <p>To add specific files, you can run the following command:</p> <pre><code>git add &lt;file&gt;\n</code></pre> <p>To add all files, you can run the following command:</p> <pre><code>git add .\n</code></pre> Tip <p>When you delete a file from a repository, you still need to run <code>git add</code> otherwise git won't be aware of the deletion.</p>"},{"location":"de/guides/git-copy/basics/#commit","title":"Commit","text":"<p>The <code>git commit</code> command is used to save changes to the local repository. It is like a snapshot of your repository at a particular point in time. But the changes are not yet on the remote repository.</p> <p>To commit changes, you can run the following command:</p> <pre><code>git commit -m \"commit message\"\n</code></pre> <p>It's highly recommended to read about Conventional Commits. It's a specification for adding human and machine readable meaning to commit messages.</p>"},{"location":"de/guides/git-copy/basics/#push","title":"Push","text":"<p>The <code>git push</code> command is used to upload local repository content to a remote repository. It is used to make the commits you have made on your local repository online. It's recommended to pull the latest changes from the remote repository before pushing your changes. By doing so, you can resolve any conflicts before pushing your changes and reduce the chances of merge conflicts.</p> <p>To push changes, you can run the following command:</p> <pre><code>git push\n</code></pre>"},{"location":"de/guides/git-copy/basics/#pull","title":"Pull","text":"<p>The <code>git pull</code> command is used to update the local version of a repository from a remote. It can be done by running the following command:</p> <pre><code>git pull\n</code></pre>"},{"location":"de/guides/git-copy/gitflow/","title":"Gitflow","text":"<p>Gitflow is a branching model that is used for managing the development of a project. You have probably seen it in various open-source projects. It's bascially a set of rules that define how branches are created and merged in order to manage the development of a project. It is consist of two components, the main branches and the supporting branches.</p> <p></p>"},{"location":"de/guides/git-copy/gitflow/#the-main-branches","title":"The Main Branches","text":"<p>The main branches are the branches that are used to manage the release of the project. They are:</p> <ol> <li><code>main</code> branch: This is the branch that contains the official release of the project.</li> <li><code>develop</code> branch: This is the branch that contains the latest development of the project and used to create the release of the project.It is where all the new features come together and are tested before they are released.</li> </ol>"},{"location":"de/guides/git-copy/gitflow/#the-supporting-branches","title":"The Supporting Branches","text":"<p>The supporting branches are the branches that are used to develop new features and fix bugs. They are:</p> <ol> <li><code>feature</code> branch: This is the branch that is used to develop new features. It is branched off from the <code>develop</code> branch and merged back into the <code>develop</code> branch when the feature is complete.</li> <li><code>release</code> branch: This is the branch that is used to prepare the release of the project. The purpose of this branch is to stop the development of new features and fix bugs. It is branched off from the <code>develop</code> branch and merged back into the <code>main</code> branch when the release is complete.</li> <li><code>hotfix</code> branch: This is the branch that is used to fix bugs in the release. It is branched off from the <code>main</code> branch and merged back into the <code>main</code> branch when the bug is fixed.</li> </ol>"},{"location":"de/guides/git-copy/gitflow/#the-workflow","title":"The Workflow","text":"<p>Let's think of a scenario where we have a project that is being developed. The project has the following branches:</p> <ol> <li><code>main</code> branch</li> <li><code>develop</code> branch</li> </ol>"},{"location":"de/guides/git-copy/gitflow/#creatingfinishing-a-feature","title":"Creating/Finishing a Feature","text":"<p>We want to develop a new feature for the project. First, we create a new branch called <code>feature-my-feature</code> from the <code>develop</code> branch.</p> <pre><code># Create a new branch called feature-my-feature from the develop branch\ngit checkout -b feature-my-feature develop\n</code></pre> <p>After we have finished developing the feature, we merge the <code>feature-my-feature</code> branch back into the <code>develop</code> branch.</p> <pre><code># Merge the feature-my-feature branch into the develop branch\ngit checkout develop\ngit merge --no-ff feature-my-feature\ngit branch -d feature-my-feature\n</code></pre> Tip <p>The last command is optional but recommended. It deletes the <code>feature-my-feature</code> branch after it has been merged into the <code>develop</code> branch. Don't worry, the changes are still there in the <code>develop</code> branch. We just want to keep our branches clean.</p>"},{"location":"de/guides/git-copy/gitflow/#creatingfinishing-a-release","title":"Creating/Finishing a Release","text":"<p>... After some time, we reach a point where we want to release the project. At this stage, it's crucial to consider how we version our releases. This is where Semantic Versioning (SemVer) comes into play. SemVer is a versioning scheme for software that aims to convey meaning about the underlying changes in a release through the version number itself. It is formatted as <code>MAJOR.MINOR.PATCH</code>, where:</p> <ul> <li>MAJOR versions indicate incompatible API changes,</li> <li>MINOR versions add functionality in a backwards-compatible manner, and</li> <li>PATCH versions include backwards-compatible bug fixes.</li> </ul> <p>For more detailed information on SemVer and its rules, visit semver.org.</p> <p>Now, to prepare our project for release, we create a new branch called <code>release-1.0</code> from the <code>develop</code> branch. The version number <code>1.0</code> should follow the SemVer guidelines, indicating this is our first stable release with a set of completed features.</p> <pre><code># Create a new branch called release-1.0 from the develop branch\ngit checkout -b release-1.0 develop\n./bump-version.sh 1.0\ngit commit -a -m \"chore(release): bump version number to 1.0\"\n</code></pre> <p>The <code>bump-version.sh</code> script is an imaginary script that we use to bump the version number of the project. After we have finished preparing the release, we merge the <code>release-1.0</code> branch back into the <code>main</code> branch.</p> <pre><code>git checkout main\ngit merge --no-ff release-1.0\n# Tag the release\ngit tag -a 1.0\n# Also Merge develop branch to keep it up to date with the release\ngit checkout develop\ngit merge --no-ff release-1.0\ngit branch -d release-1.0\n</code></pre> Tip <p>The last command is optional but recommended. It deletes the <code>release-1.0</code> branch after it has been merged into the <code>main</code> branch. Don't worry, the changes are still there in the <code>main</code> branch. We just want to keep our branches clean.</p>"},{"location":"de/guides/git-copy/gitflow/#fixing-a-bug-in-the-release","title":"Fixing a Bug in the Release","text":"<p>After releasing version 1.0 of our project, we discovered a bug that needs to be addressed immediately. It's also important to adhere to SemVer principles. If the bug fix is backward compatible and doesn\u2019t introduce new features, it should increment the PATCH version. For instance, if we're fixing a bug in version <code>1.0</code>, the hotfix version would be <code>1.0.1</code>.</p> <pre><code># Create a new branch called hotfix-1.0.1 from the main branch\ngit checkout -b hotfix-1.0.1 main\n./bump-version.sh 1.0.1\ngit commit -a -m \"chore(release): bump version number to 1.0.1\"\n</code></pre> <p>After we have fixed the bug, we merge the <code>hotfix-1.0.1</code> branch back into the <code>main</code> branch.</p> <pre><code>git checkout main\ngit merge --no-ff hotfix-1.0.1\n# Tag the release\ngit tag -a 1.0.1\n# Also Merge develop branch to keep it up to date with the main\ngit checkout develop\ngit merge --no-ff hotfix-1.0.1\ngit branch -d hotfix-1.0.1\n</code></pre> Tip <p>The last command is optional but recommended. It deletes the <code>hotfix-1.0.1</code> branch after it has been merged into the <code>main</code> branch. Don't worry, the changes are still there in the <code>main</code> branch. We just want to keep our branches clean.</p>"},{"location":"de/guides/git-copy/install/","title":"Install","text":"<p>You can check if Git is installed on your system by running the following command:</p> <pre><code>git version\n</code></pre> <p>The output should be similar to this:</p> <pre><code>git version 2.43.1\n</code></pre> <p>If you get an error like <code>git: command not found</code>, you can fallow the instructions below to install Git.</p>"},{"location":"de/guides/git-copy/install/#installing-on-windows","title":"Installing on Windows","text":"<p>Installing <code>git</code> on Windows is straightforward</p> <ol> <li>Download the installer from the official website.</li> <li>Run the installer and follow the instructions.</li> <li>After the installation is complete, you can open terminal and run <code>git version</code> to check if the installation was successful.</li> </ol> Tip <p>In Windows 10 or later, you can also use WSL which allows you to run a Linux on top of Windows. This allows you to be in a Linux environment while still using Windows.</p> Note <p>At the <code>Adjusting your PATH environment</code> choose <code>Git from the command line and also from 3rd-party software</code>. This will allow you to use <code>git</code> from the windows terminal. This article assumes that you have done this. Otherwise you will have to use the Git Bash terminal that comes with the installer for the commands in this guide.</p>"},{"location":"de/guides/git-copy/install/#installing-on-macos","title":"Installing on macOS","text":"<p>Usially <code>git</code> is already installed on macOS. But if it for some reason is not installed, you can install it either with Homebrew or by downloading the installer.</p>"},{"location":"de/guides/git-copy/install/#using-homebrew","title":"Using Homebrew","text":"<p>Homebrew is a package manager for macOS. If you have Homebrew installed, you can install <code>git</code> easily.</p> <ol> <li> <p>Open terminal and run the following command to install <code>git</code>:</p> <pre><code>brew install git\n</code></pre> </li> <li> <p>After the installation is complete, you can run <code>git version</code> to verify that the installation was successful.</p> </li> </ol>"},{"location":"de/guides/git-copy/install/#using-the-installer","title":"Using the installer","text":"<ol> <li>Download the latest installer.</li> <li>Run the installer and follow the instructions.</li> <li>After the installation is complete. You can verify the installation by running <code>git version</code> in the terminal.</li> </ol>"},{"location":"de/guides/git-copy/install/#installing-on-linux","title":"Installing on Linux","text":"<p>You can install <code>git</code> on Linux using the package manager of your distribution.</p>"},{"location":"de/guides/git-copy/install/#debianubuntu-or-derivatives","title":"Debian/Ubuntu or derivatives","text":"<pre><code>sudo apt-get update\nsudo apt-get install git\n</code></pre>"},{"location":"de/guides/git-copy/install/#fedora-or-derivatives","title":"Fedora or derivatives","text":"<pre><code>sudo dnf install git-all\n</code></pre>"},{"location":"de/guides/git-copy/install/#arch-linux-or-derivatives","title":"Arch Linux or derivatives","text":"<pre><code>sudo pacman -S git\n</code></pre> <p>After the installation is complete, you can verify the installation by running <code>git version</code> in the terminal.</p>"},{"location":"de/guides/git-copy/install/#configuration","title":"Configuration","text":"<p>Installing git allows you to clone repositories and track changes in your projects. However, you need to configure git with your credentials before you can push changes to a remote repository. This can be done by running the following commands in the terminal:</p> <pre><code>git config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n</code></pre> <p>You can also omit the <code>--global</code> flag to set the configuration for a single repository. For that you need to navigate to the repository and run the same commands without the <code>--global</code> flag.</p> <p>From this point on you can use git to track changes in your project. Git will ask you your credentials when you try to push your changes to a remote repository. You can also use SSH keys to authenticate with the remote repository. Which is not only more secure but also more convenient.</p> Note <p>If you are using GitHub, you have to use SSH keys to authenticate with the remote repository. GitHub has removed support for password authentication on August 13, 2021.</p>"},{"location":"de/guides/git-copy/install/#ssh-keys","title":"SSH Keys","text":"<p>To create an SSH key, you can run the following command in the terminal:</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>This will create a new SSH key, using the provided email as a label. You can safely accept the default file location when asked. You can also add a passphrase to your SSH key for an extra layer of security. Which is recommended. Without a passphrase the ssh key will be stored in your computer as plain text.</p> Tip <p>If ssh-keygen asks you to overwrite the file this means that you already have created an SSH key in the past. You can either overwrite the file or provide a new file name. To create a custom-named SSH key you can type the default file location and then the name of the new file.</p> <p>After generating the SSH key, the next step is adding it to your remote repository. Instructions for GitHub and for GitLab are available in their respective documentation.</p> <p>You can also add the SSH key to your SSH agent which will allow you to use the key without having to enter the passphrase every time you use it. For that GitHub has a good guide on how to add SSH key to the ssh-agent.</p>"},{"location":"de/guides/git-copy/references/","title":"References","text":"<ul> <li>GitHub Git Guide</li> <li>GitHub Authentication Documentation</li> <li>Gitflow Medium</li> <li>Gitflow Nvie</li> </ul>"}]}